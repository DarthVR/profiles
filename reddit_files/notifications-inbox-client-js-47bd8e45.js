SML.di("./shell-e48e5956.js",import.meta.url,"shelle48e5956");SML.di("./announcement-overflow-menu-652e3729.js",import.meta.url,"announcementoverflowmenu652e3729");SML.di("./icon-c33661e6.js",import.meta.url,"iconc33661e6");SML.di("./age-gate-standalone-client-js-b13e879d.js",import.meta.url,"agegatestandaloneclientjsb13e879d");SML.di("./expandable-section-header-41e0cfd1.js",import.meta.url,"expandablesectionheader41e0cfd1");SML.di("./select-controller-4c63b3e8.js",import.meta.url,"selectcontroller4c63b3e8");SML.di("./table-pagination-77cf692d.js",import.meta.url,"tablepagination77cf692d");SML.di("./rpl-menu-e3bc99ae.js",import.meta.url,"rplmenue3bc99ae");SML.di("./rpl-menu-item-1d69ffec.js",import.meta.url,"rplmenuitem1d69ffec");SML.di("./unshared-article-feed-page-client-js-147fa7b7.js",import.meta.url,"unsharedarticlefeedpageclientjs147fa7b7");SML.di("./community-onboarding-completed-modal-client-js-f4f5192c.js",import.meta.url,"communityonboardingcompletedmodalclientjsf4f5192c");SML.di("./all-chats-page-recommendations-client-js-6f0a19fc.js",import.meta.url,"allchatspagerecommendationsclientjs6f0a19fc");SML.di("./shreddit-spoiler-d9cdac7e.js",import.meta.url,"shredditspoilerd9cdac7e");SML.di("./shreddit-share-list-item-b92e684a.js",import.meta.url,"shredditsharelistitemb92e684a");SML.di("./mod-log-takedown-preview-client-js-d3af86b9.js",import.meta.url,"modlogtakedownpreviewclientjsd3af86b9");SML.di("./shop-gallery-data-fetcher-client-js-777c4af0.js",import.meta.url,"shopgallerydatafetcherclientjs777c4af0");SML.di("./rpl-coachmark-card-5c5498b1.js",import.meta.url,"rplcoachmarkcard5c5498b1");SML.di("./rpl-coachmark-4e17786a.js",import.meta.url,"rplcoachmark4e17786a");SML.di("./user-flair-fe275854.js",import.meta.url,"userflairfe275854");SML.di("./utils-93db03dd.js",import.meta.url,"utils93db03dd");SML.di("./hovercard.base-854dc86f.js",import.meta.url,"hovercardbase854dc86f");SML.di("./hui-user-drawer-client-js-91e856a7.js",import.meta.url,"huiuserdrawerclientjs91e856a7");SML.di("./TinyGesture-26737d23.js",import.meta.url,"TinyGesture26737d23");SML.di("./with-share-d1523f2d.js",import.meta.url,"withshared1523f2d");SML.di("./a-e18b1320.js",import.meta.url,"ae18b1320");SML.di("./content-action-button-6a45f903.js",import.meta.url,"contentactionbutton6a45f903");SML.di("./index-192b5d82.js",import.meta.url,"index192b5d82");SML.di("./header-action-item-chat-client-js-b3335fba.js",import.meta.url,"headeractionitemchatclientjsb3335fba");SML.di("./tooltip.base-aa9651a3.js",import.meta.url,"tooltipbaseaa9651a3");SML.di("./keywords-fa9c4196.js",import.meta.url,"keywordsfa9c4196");SML.di("./awards-2379b181.js",import.meta.url,"awards2379b181");SML.di("./number-a5d31186.js",import.meta.url,"numbera5d31186");
SML.dm("notificationsinboxclientjs47bd8e45",["shelle48e5956","announcementoverflowmenu652e3729","iconc33661e6","agegatestandaloneclientjsb13e879d","expandablesectionheader41e0cfd1","communityonboardingcompletedmodalclientjsf4f5192c","selectcontroller4c63b3e8","tablepagination77cf692d","rplmenue3bc99ae","rplmenuitem1d69ffec","unsharedarticlefeedpageclientjs147fa7b7","allchatspagerecommendationsclientjs6f0a19fc","shredditspoilerd9cdac7e","shredditsharelistitemb92e684a","modlogtakedownpreviewclientjsd3af86b9","shopgallerydatafetcherclientjs777c4af0","rplcoachmarkcard5c5498b1","rplcoachmark4e17786a","userflairfe275854","utils93db03dd","hovercardbase854dc86f","huiuserdrawerclientjs91e856a7","TinyGesture26737d23","withshared1523f2d","ae18b1320","contentactionbutton6a45f903","index192b5d82","headeractionitemchatclientjsb3335fba","tooltipbaseaa9651a3","keywordsfa9c4196","awards2379b181","numbera5d31186"],(async(e,t,i,s,o,n)=>{const r=new Set([e.M.CommentReply,e.M.PostReply,e.M.UsernameMention]);function a(e,t,i){window.Sentry?.captureMessage?.(`Unexpected inbox mark as read error id: ${t}, type: ${i}, err: ${JSON.stringify(e)}`)}let l=class extends(e.C(i.s)){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isM2InboxExperiment=!1,this.notificationsFromMailroomOnly=!1,this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:i}])=>{i&&!this.isViewed&&(e.a(this,t.n(this.getTrackEventProperties())),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async i=>{(!this.hasLink||this.isDeletedPost||this.isRemovedPost||t.i(i))&&i.preventDefault();return!!i.target?.closest("notification-context-menu")||e.a(this,t.a({...this.getTrackEventProperties(),clickTarget:"notification"})),this.isDeletedPost?this.showAlert({message:"Sorry this post was deleted"}):this.isRemovedPost&&this.showAlert({message:"This content is no longer available"}),await this.fireReadEvent(),!1},this.getUnreadChildElement=()=>this.isM2InboxExperiment?this.querySelector("rpl-inbox-row[selected]"):this.querySelector(`.${t.u}`),this.fireReadEvent=async()=>{this.getUnreadChildElement()&&(this.removeUnreadState(),await async function(t,i,s){if(t)try{let o;r.has(i)&&!s?(o=await e.B({operation:e.O.MarkPrivateMessageAsRead,variables:{input:{messageId:t}}}),a(o.data.markPrivateMessageAsRead?.errors,t,i)):(o=await e.B({operation:e.O.MarkNotificationRead,variables:{input:{notificationId:t}}}),a(o.data.readNotificationLoggedIn?.errors,t,i))}catch(e){}}(this.notificationId,this.messageType,this.notificationsFromMailroomOnly))},this.removeUnreadState=()=>{const e=this.getUnreadChildElement();e&&(this.isM2InboxExperiment?e.removeAttribute("selected"):e.classList.remove(t.u))},this.showAlert=({message:t})=>this.dispatchEvent(e.c("faceplate-alert",{level:e.x.warning,message:t})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${t.b}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){e.a(this,t.c(this.getTrackEventProperties())),this.querySelector("a")?.addEventListener("click",this.onClick),this.isM2InboxExperiment&&this.querySelector("rpl-inbox-row")?.addEventListener("click",this.onClick),this.subscribe(e.T.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(e.T.InboxReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?i.A:i.x`<slot></slot>`}};l.styles=[e.t],e._([e.n({type:Boolean,attribute:"is-viewed",reflect:!0})],l.prototype,"isViewed",void 0),e._([e.n({type:Boolean,attribute:"is-deleted-post"})],l.prototype,"isDeletedPost",void 0),e._([e.n({type:Boolean,attribute:"is-removed-post"})],l.prototype,"isRemovedPost",void 0),e._([e.n({type:String,attribute:"notification-id"})],l.prototype,"notificationId",void 0),e._([e.n({type:String,attribute:"message-type"})],l.prototype,"messageType",void 0),e._([e.n({type:Boolean,attribute:"has-link"})],l.prototype,"hasLink",void 0),e._([e.n({type:Boolean,attribute:"is-m2-inbox-experiment"})],l.prototype,"isM2InboxExperiment",void 0),e._([e.n({type:Boolean,attribute:"notifications-from-mailroom-only"})],l.prototype,"notificationsFromMailroomOnly",void 0),e._([e.d()],l.prototype,"isHidden",void 0),l=e._([e.e("notification-item")],l);const d="inbox_banner_seen_count_store";function c({currentStorageData:e,userId:t,inboxBannerName:i}){return e?.[t]?.find((e=>e.inboxBannerName===i))?.seenCount??0}function h({userId:e,inboxBannerName:t,seenCount:i,currentStorageData:o={}}){const n={...o||{},[e]:[{inboxBannerName:t,seenCount:i}]};s.$(d,n)}let u=class extends i.s{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0,this.userId&&this.name&&this.maxViews&&function({userId:e,inboxBannerName:t,seenCount:i}){h({userId:e,currentStorageData:s.a0(d),inboxBannerName:t,seenCount:i})}({userId:this.userId,inboxBannerName:this.name,seenCount:this.maxViews})},this.onClick=e=>{t.i(e)&&e.preventDefault()}}firstUpdated(){if(this.querySelectorAll(`[data-id="${t.d}"`).forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)})),this.userId&&this.name){const e=function({userId:e,inboxBannerName:t}){return c({userId:e,inboxBannerName:t,currentStorageData:s.a0(d)})}({userId:this.userId,inboxBannerName:this.name});void 0!==this.maxViews&&e>=this.maxViews?this.isHidden=!0:function({userId:e,inboxBannerName:t}){const i=s.a0(d);h({userId:e,currentStorageData:i,inboxBannerName:t,seenCount:c({userId:e,inboxBannerName:t,currentStorageData:i})+1})}({userId:this.userId,inboxBannerName:this.name})}}render(){return this.isHidden?i.A:i.x`<slot></slot>`}};u.styles=[e.t],e._([e.d()],u.prototype,"isHidden",void 0),e._([e.n({type:Object})],u.prototype,"colorMap",void 0),e._([e.n({type:String,attribute:"user-id"})],u.prototype,"userId",void 0),e._([e.n({type:String})],u.prototype,"name",void 0),e._([e.n({type:Number,attribute:"max-views"})],u.prototype,"maxViews",void 0),u=e._([e.e("notification-inbox-banner")],u);const p=({notificationLevel:t,isEnablingUpdates:i})=>{if(i)switch(t){case e.ef.Off:case null:return e.ef.Low;case e.ef.Low:case e.ef.Frequent:default:return e.ef.Frequent}else switch(t){case e.ef.Frequent:return e.ef.Low;case e.ef.Low:default:return e.ef.Off}};let m=class extends(e.C(i.s)){constructor(){super(...arguments),this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.subredditName="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.shouldDecoupleInboxSettings=!1,this.isMobile=!1,this.isM2InboxExperiment=!1,this.followedKeywordId="",this.followedKeyword="",this.isDialogOpened=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===e.ef.Off,this.getIsRead=()=>this.isM2InboxExperiment?!this.querySelector("rpl-inbox-row[selected]"):!this.closest("notification-item")?.querySelector(`.${t.u}`),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[e.M.ChatAcceptInvite,e.M.ChatMessage,e.M.ChatMessageReaction,e.M.ChatRequest,e.M.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.shouldRenderManageThisNotification=()=>this.shouldDecoupleInboxSettings&&this.messageType,this.shouldRenderRemoveKeywordAlert=()=>!(!this.followedKeyword||!this.followedKeywordId||this.messageType!==e.M.KeywordFollow),this.shouldRenderTurnOffKeywordAlerts=()=>this.messageType===e.M.KeywordFollow,this.hideNotification=async()=>{try{const t=await e.B({operation:e.O.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}});if(t.data.deleteInboxNotifications?.ok)return this.showAlert({level:e.x.notice,message:"Notification removed"}),void this.publish(e.T.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async i=>{try{this.notificationLevel=i?this.initialNotificationLevel:e.ef.Off;const s=await e.B({operation:e.O.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:i,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}});if(s.data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:t.N.HideSubreddit,isDo:!i,doConfig:{message:"Success! You won't see updates from this subreddit in the future.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Success! Hiding updates from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=i?e.ef.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async i=>{this.notificationLevel=p({isEnablingUpdates:i,notificationLevel:this.notificationLevel});try{const s=await e.B({operation:e.O.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:i}}});if(s.data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:t.N.DisableNotificationType,isDo:!i,doConfig:{message:"Success! You'll see less from this subreddit in the future.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Success! Seeing less from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=p({isEnablingUpdates:!i,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async i=>{try{const s=await e.B({operation:e.O.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:i?e.fJ.Send:e.fJ.DoNotSend}}});if(s.data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:t.N.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this post in the future.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async i=>{try{const s=await e.B({operation:e.O.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:i?e.fJ.Send:e.fJ.DoNotSend}}});if(s.data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:t.N.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this comment in the future.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async i=>{try{const s=await e.B({operation:e.O.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:i}}});if(s.data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:t.N.BlockUser,isDo:i===e.f5.Blocked,doConfig:{message:`u/${this.userName} is now blocked.`,undoOnClick:()=>this.changeUserBlockStatus(e.f5.None)},undoConfig:{message:`u/${this.userName} is now unblocked.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.removeKeywordAlert=async()=>{if(this.followedKeywordId){try{const t=await e.B({operation:e.O.UpdateFollowedKeywords,variables:{input:{keywords:[{keywordId:this.followedKeywordId,followState:e.cK.Unfollowed}]}}});if(t.data.updateFollowedKeywords?.ok)return void this.showAlert({level:e.x.notice,message:"Success! You will no longer see updates for this keyword."})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})}},this.turnOnKeywordAlerts=async()=>{try{const i=await e.B({operation:e.O.UpdateInboxNotificationPreferences,variables:{input:{preferences:[{messageType:e.M.KeywordFollow,isEnabled:!0}]}}});if(i.data.updateInboxNotificationPreferences?.ok)return void this.handleAlerts({actionInfoType:t.N.ManageNotification,isDo:!1,doConfig:{message:"Success! You won’t see keyword alerts in the future.",undoOnClick:()=>this.turnOnKeywordAlerts()},undoConfig:{message:"Success! Keyword alerts have been turned back on."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.turnOffKeywordAlerts=async()=>{try{const i=await e.B({operation:e.O.UpdateInboxNotificationPreferences,variables:{input:{preferences:[{messageType:e.M.KeywordFollow,isEnabled:!1}]}}});if(i.data.updateInboxNotificationPreferences?.ok)return void this.handleAlerts({actionInfoType:t.N.DisableNotificationType,isDo:!0,doConfig:{message:"Success! You won’t see keyword alerts in the future.",undoOnClick:()=>this.turnOnKeywordAlerts()},undoConfig:{message:"Success! Keyword alerts have been turned back on."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:t,actionInfoType:i,doConfig:s,undoConfig:o})=>{t?this.showAlert({level:e.x.notice,message:s.message,undoOnClick:s.undoOnClick,actionInfoType:i}):this.showAlert({level:e.x.notice,message:o.message})},this.showAlert=({level:i=e.x.error,message:s="Something went wrong",undoOnClick:o,actionInfoType:n})=>this.dispatchEvent(e.c("faceplate-alert",{level:i,message:s,cause:i===e.x.error?e.ag.UncaughtError:void 0,namedContent:o&&n?{action:e.r({children:"Undo",attributes:{onclick:()=>{o(),e.a(this,t.k(this.getTrackClickOptionProperties(n)))}}})}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Hide",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification",hasRedirect:!1}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Don't get updates on this",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment",hasRedirect:!1}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:this.subredditName?`Turn off r/${this.subredditName} notifications`:"Disable updates from this community",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit",hasRedirect:!1}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Block this user ",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.BlockUser))),this.changeUserBlockStatus(e.f5.Blocked)),dataTestId:"block-user",hasRedirect:!1}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"See less from this community",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less",hasRedirect:!1}),this.renderManageThisNotification=()=>this.renderMenuElement({label:"Manage this notification",onClick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.ManageNotification))),this.redirect(`/settings/notifications?open_modal=${this.messageType}`),Promise.resolve()),dataTestId:"manage-notification",hasRedirect:!0}),this.renderOverflowHorizontalBtn=()=>i.x` <faceplate-tracker source="${t.f}" action="click" noun="${t.g}" data-faceplate-tracking-context="${JSON.stringify(t.h(this.getTrackEventProperties()))}"> ${e.r({appearance:"plain",attributes:{type:"button","data-testid":"overflow-horizontal-button",slot:"menu","aria-label":"Open notification actions",onclick:()=>{this.openRplDialog()}},leadingIcon:i.p({size:i.I.Small}),size:e.s.Small})} </faceplate-tracker> `,this.renderRemoveKeywordAlert=i=>this.renderMenuElement({label:`Remove "${i}" keyword alert`,onClick:()=>(e.a(this,t.e(this.getTrackClickOptionProperties(t.N.ManageNotification))),this.removeKeywordAlert()),dataTestId:"remove-keyword-alert",hasRedirect:!1}),this.renderTurnOffKeywordAlerts=()=>this.renderMenuElement({label:"Turn off keyword alerts",onClick:()=>(e.a(this,t.e(this.getTrackClickOptionProperties(t.N.DisableNotificationType))),this.turnOffKeywordAlerts()),dataTestId:"turn-off-keyword-alerts",hasRedirect:!1}),this.renderRemoveBtn=()=>this.isM2InboxExperiment&&!this.isMobile&&this.isHideEligible?e.r({appearance:"plain",leadingIcon:i.ab({size:i.I.Small}),size:e.s.Small,attributes:{"data-testid":"delete-notification",onclick:()=>(this.closeRplDialog(),e.a(this,t.e(this.getTrackClickOptionProperties(t.N.HideNotification))),this.hideNotification()),slot:"hover-actions"}}):i.A,this.closeRplDialog=()=>{this.isDialogOpened=!1},this.openRplDialog=()=>{this.isDialogOpened=!0},this.redirect=e=>{window.location.href=e},this.renderMenuElement=({label:e,onClick:t,dataTestId:s,hasRedirect:n})=>this.isM2InboxExperiment?i.x` <rpl-menu-item size="small" data-testid="${s}" @click="${t}"> ${e} </rpl-menu-item> `:o.l({onClick:t,label:e,trailingSlot:n?i.aa():void 0,attributes:{role:"menuitem","data-testid":s}}),this.onOpenMenu=()=>e.a(this,t.j(this.getTrackEventProperties())),this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:!0,isClicked:this.getIsRead()})}render(){const t=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null,this.shouldRenderManageThisNotification()?this.renderManageThisNotification():null,this.shouldRenderRemoveKeywordAlert()?this.renderRemoveKeywordAlert(this.followedKeyword):null,this.shouldRenderTurnOffKeywordAlerts()?this.renderTurnOffKeywordAlerts():null].filter(Boolean),s=i.x` <rpl-modal-card> <div slot="title"> Options </div> <div slot="close-button"> ${e.r({appearance:"secondary",leadingIcon:i.C({size:i.I.Small}),size:e.s.Small,attributes:{style:"line-height: initial;",onclick:()=>{this.closeRplDialog()}}})} </div> <rpl-menu> ${t} </rpl-menu> </rpl-modal-card> `;return 0===t.length?i.A:i.x` <div class="flex gap-1"> ${this.renderRemoveBtn()} ${this.isM2InboxExperiment?this.isMobile?i.x`<div> ${this.renderOverflowHorizontalBtn()} <rpl-dialog-sheet dialog-id="dialog-notification-overflow-menu-${this.notificationId}" force-variant="bottom-sheet" .open="${this.isDialogOpened}" @rpl-dialog-sheet:after-hide="${()=>{this.isDialogOpened=!1}}" .litTemplateChildren="${s}"> </rpl-dialog-sheet> </div>`:i.x` <rpl-dropdown placement="bottom-end"> ${this.renderOverflowHorizontalBtn()} <rpl-menu slot="content"> ${t} </rpl-menu> </rpl-dropdown> `:i.x` <faceplate-dropdown-menu position="bottom-end"> ${this.renderOverflowHorizontalBtn()} <faceplate-menu slot="menu" class="block bg-neutral-background"> ${t} </faceplate-menu> </faceplate-dropdown-menu>`} </div> `}};m.styles=[e.t],e._([e.n({type:String,attribute:"message-type"})],m.prototype,"messageType",void 0),e._([e.n({type:String,attribute:"notification-level",reflect:!0})],m.prototype,"notificationLevel",void 0),e._([e.n({type:String,attribute:"notification-id"})],m.prototype,"notificationId",void 0),e._([e.n({type:String,attribute:"user-id"})],m.prototype,"userId",void 0),e._([e.n({type:String,attribute:"user-name"})],m.prototype,"userName",void 0),e._([e.n({type:String,attribute:"post-id"})],m.prototype,"postId",void 0),e._([e.n({type:String,attribute:"comment-id"})],m.prototype,"commentId",void 0),e._([e.n({type:String,attribute:"subreddit-id"})],m.prototype,"subredditId",void 0),e._([e.n({type:String,attribute:"subreddit-name"})],m.prototype,"subredditName",void 0),e._([e.n({type:Boolean,attribute:"is-hide-eligible"})],m.prototype,"isHideEligible",void 0),e._([e.n({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],m.prototype,"isToggleUpdateFromSubredditEligible",void 0),e._([e.n({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],m.prototype,"isToggleNotificationUpdateEligible",void 0),e._([e.n({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],m.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),e._([e.n({type:Boolean,attribute:"should-decouple-inbox-settings"})],m.prototype,"shouldDecoupleInboxSettings",void 0),e._([e.n({type:Boolean,attribute:"is-mobile"})],m.prototype,"isMobile",void 0),e._([e.n({type:Boolean,attribute:"is-m2-inbox-experiment"})],m.prototype,"isM2InboxExperiment",void 0),e._([e.n({type:String,attribute:"followed-keyword-id"})],m.prototype,"followedKeywordId",void 0),e._([e.n({type:String,attribute:"followed-keyword"})],m.prototype,"followedKeyword",void 0),e._([e.d()],m.prototype,"isDialogOpened",void 0),m=e._([e.e("notification-context-menu")],m);let b=class extends e.fK{constructor(){super(...arguments),this.trackExitEvent=()=>{this.trackEvent()}}get miniInboxTooltip(){return document.querySelector(`#${t.m}`)}connectedCallback(){super.connectedCallback(),this.source=t.f,this.action="exit",this.noun="mini_inbox",this.miniInboxTooltip?.addEventListener(this.closeEventName,this.trackExitEvent)}disconnectedCallback(){super.disconnectedCallback(),this.miniInboxTooltip?.removeEventListener(this.closeEventName,this.trackExitEvent)}get closeEventName(){return`${this.miniInboxTooltip?.tagName.toLowerCase()}:close`}};b=e._([e.e("notification-inbox-exit-tracker")],b);let g=class extends i.s{constructor(){super(...arguments),this.fireReadAll=async()=>{try{e.a(this,t.l({badgeCount:this.getUnreadCount()})),e.p(e.T.InboxReadAllEvent),e.p(e.T.InboxCountChanged,0);const i=await e.B({operation:e.O.MarkPrivateMessageAsRead,variables:{input:{}}});i.data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector(`[data-id="${t.o}"]`)?.getCount()??0,this.dispatchErrorMessage=()=>{this.dispatchEvent(e.c("faceplate-alert",{level:e.x.error,cause:"uncategorized",message:"Something went wrong while marking all notifications as read"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return i.x` <slot></slot> `}};g=e._([e.e("mark-all-messages-read")],g);let f=class extends i.s{constructor(){super(...arguments),this.initialMessagesCount=0}async firstUpdated(){e.p(e.T.InboxCountChanged,this.initialMessagesCount),this.initialMessagesCount?navigator.setAppBadge?.(this.initialMessagesCount):navigator.clearAppBadge?.(),await e.B({operation:e.O.UpdateInboxActivitySeenState,variables:{input:{lastSentAt:this.lastSentAt?this.lastSentAt:(new Date).toISOString()}}})}render(){return i.A}};e._([e.n({type:Number,attribute:"initial-messages-count"})],f.prototype,"initialMessagesCount",void 0),e._([e.n({type:String,attribute:"last-sent-at"})],f.prototype,"lastSentAt",void 0),f=e._([e.e("mark-all-notifications-seen")],f);let y=class extends i.s{constructor(){super(...arguments),this.announcementId="",this.isM2InboxExperiment=!1,this.isHidden=!1,this.observer=null,this.pubsub=new e.P(this),this.onClick=e=>{t.i(e)?e.preventDefault():this.removeUnreadState()},this.onHide=e=>{e===this.announcementId&&(this.isHidden=!0)},this.handleVisibilityChange=([{isIntersecting:i}])=>{if(i){if(this.hasBeenViewed)return void this.observer?.disconnect();const{title:i="",body:s=""}=this.notificationTelemetryData??{};e.a(this,t.n({notificationType:t.p,notificationId:this.announcementId,isViewed:!1,isClicked:!this.unreadChildElement,title:i,body:s})),this.observer?.disconnect()}},this.removeUnreadState=()=>{this.isM2InboxExperiment?this.unreadChildElement?.removeAttribute("selected"):this.unreadChildElement?.classList.remove(t.u)}}get hasBeenViewed(){return!!this.notificationTelemetryData?.viewedAt}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.onClick),this.pubsub.subscribe(e.T.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.subscribe(e.T.InboxReadAllEvent,this.removeUnreadState),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${t.b}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.onClick),this.pubsub.unsubscribe(e.T.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.unsubscribe(e.T.InboxReadAllEvent,this.removeUnreadState),this.observer?.disconnect()}firstUpdated(){if(!this.hasBeenViewed){const{title:i="",body:s=""}=this.notificationTelemetryData??{};e.a(this,t.c({notificationType:t.p,notificationId:this.announcementId,isViewed:!1,isClicked:!this.unreadChildElement,title:i,body:s}))}}get unreadChildElement(){return this.isM2InboxExperiment?this.querySelector("rpl-inbox-row[selected]"):this.querySelector(`.${t.u}`)}render(){return this.isHidden?i.A:i.x`<slot></slot>`}};y.styles=[e.t],e._([e.n({type:String,attribute:"announcement-id"})],y.prototype,"announcementId",void 0),e._([e.n({type:Object,attribute:"notification-telemetry-data"})],y.prototype,"notificationTelemetryData",void 0),e._([e.n({type:Boolean,attribute:"is-m2-inbox-experiment"})],y.prototype,"isM2InboxExperiment",void 0),e._([e.d()],y.prototype,"isHidden",void 0),y=e._([e.e("notification-announcement")],y);class v extends e.Q{constructor(){super(...arguments),this.elevated=!1}render(){return i.x` <slot></slot> `}}e._([e.n({type:Boolean})],v.prototype,"elevated",void 0);var E=i.a`${e.V}:host{--rpl-card-border-radius:var(--rem16);display:flex;flex-direction:column;background-color:var(--color-neutral-background-container);border-radius:var(--rpl-card-border-radius)}:host([elevated]){background-color:var(--color-neutral-background);box-shadow:var(--0,0) var(--1,1px) var(--2,2px) var(--0,0) var(--color-elevation-xsmall)}`;let T=class extends v{};T.styles=E,T=e._([e.e("rpl-card")],T);class S extends e.Q{constructor(){super(...arguments),this.disabled=!1,this.hoverable=!1,this.selected=!1,this.forceTouchOnly=!1,this.role="button",this.inaccessibleHref="",this.handleClick=e=>{if(this.disabled)return void e.preventDefault();const t=e.target;t.closest("a, button")||t.closest('[slot="trailing"]')||t.closest('[slot="hover-actions"]')||t.closest("#hover-menu")||this.inaccessibleHref&&this.navigateTo(this.inaccessibleHref)}}connectedCallback(){super.connectedCallback(),(S.isTouchOnly||this.forceTouchOnly)&&this.setAttribute("rpl-touch-only",""),this.addEventListener("click",this.handleClick)}navigateTo(e){window.location.assign(e)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.handleClick)}willUpdate(){this.setAttribute("aria-disabled",this.disabled?"true":"false"),this.setAttribute("role",this.role)}render(){return i.x` <div class="leading"><slot name="leading"></slot></div> <div class="content"><slot></slot></div> <div class="trailing"><slot name="trailing"></slot></div> <div id="hover-menu"> <rpl-card elevated> <slot name="hover-actions"></slot> </rpl-card> </div> `}}S.isTouchOnly=n.i(),e._([e.n({type:Boolean,reflect:!0})],S.prototype,"disabled",void 0),e._([e.n({type:Boolean,reflect:!0})],S.prototype,"hoverable",void 0),e._([e.n({type:Boolean,reflect:!0})],S.prototype,"selected",void 0),e._([e.n({type:Boolean,reflect:!0,attribute:"force-touch-only"})],S.prototype,"forceTouchOnly",void 0),e._([e.n({type:String,reflect:!0})],S.prototype,"role",void 0),e._([e.n({type:String,reflect:!0})],S.prototype,"inaccessibleHref",void 0);var I=i.a`${e.V}:host{display:flex;gap:var(--rem12);padding:var(--rem8) var(--rem16);position:relative}:host([hoverable]:not([disabled])){cursor:pointer}:host([selected]){background-color:var(--color-neutral-background-container-strong)}:host([disabled]){opacity:.5;pointer-events:none}:host(:not([rpl-touch-only]):not([disabled])[hoverable]:hover){background-color:var(--color-neutral-background-hover)}:host([selected]:not([rpl-touch-only]):not([disabled])[hoverable]:hover){background-color:var(--color-neutral-background-container-strong-hover)}#hover-menu{display:flex;opacity:0;position:absolute;top:0;right:0;transform:translateY(-60%);pointer-events:none;z-index:1}:host([disabled]) #hover-menu,:host([rpl-touch-only]) #hover-menu{display:none}:host(:focus-within:not([rpl-touch-only]):not([disabled])) #hover-menu,:host(:hover:not([rpl-touch-only]):not([disabled])) #hover-menu{opacity:1;pointer-events:auto}rpl-card{display:flex;flex-direction:row;padding:var(--rem2)}.content{min-width:0;display:flex;flex:1}.trailing{display:flex;align-items:center}`;let w=class extends S{};w.styles=I,w=e._([e.e("rpl-inbox-row")],w);let k=class extends e.Q{constructor(){super(...arguments),this.forceTouchOnly=!1,this.handleClick=e=>{e.stopPropagation()}}render(){return S.isTouchOnly||this.forceTouchOnly?i.x`<slot></slot>`:i.A}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.handleClick)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.handleClick)}};e._([e.n({type:Boolean,attribute:"force-touch-only"})],k.prototype,"forceTouchOnly",void 0),k=e._([e.e("rpl-inbox-row-touch-only")],k);let D=class extends i.s{constructor(){super(...arguments),this._rplCoachMarkRef=e.aq()}get counterValue(){try{const t=e.l.getItem(e.L.PmArchiveCoachmarkSeenCount);if(null===t)return 0;const i=parseInt(t);return Number.isNaN(i)?2:i}catch{return 2}}shouldShow(){return this.counterValue<2}incrementCoachmarkCounter(){try{e.l.setItem(e.L.PmArchiveCoachmarkSeenCount,(this.counterValue+1).toString())}catch{}}firstUpdated(t){e.l.isAvailable()&&this.shouldShow()&&(this._rplCoachMarkRef.value?.show(),this.incrementCoachmarkCounter())}render(){return i.x`<rpl-coachmark placement="bottom" appearance="inverted" ${e.as(this._rplCoachMarkRef)} .anchor="${this.querySelector(`#${this.anchorElemId}`)}"> <slot></slot> <rpl-coachmark-card auto-close slot="content" aria-live="polite" appearance="inverted" class="w-[220px]"> <span class="text-14" slot="title">Your private messages are now archived here</span> ${e.r({attributes:{"aria-label":"Close",slot:"close-button"},appearance:"plainInverted",leadingIcon:i.C({size:i.I.Small}),size:e.s.Small})} </rpl-coachmark-card> </rpl-coachmark>`}};D.styles=[e.t],e._([e.n({type:String,attribute:"anchor-elem-id"})],D.prototype,"anchorElemId",void 0),D=e._([e.e("pm-archive-entrypoint-coachmark")],D)}));