SML.di("./community-creation-walkthrough-fragment-client-js-7c6966f6.js",import.meta.url,"communitycreationwalkthroughfragmentclientjs7c6966f6");SML.di("./shell-e48e5956.js",import.meta.url,"shelle48e5956");SML.di("./faceplate-textarea-input-29f541e5.js",import.meta.url,"faceplatetextareainput29f541e5");SML.di("./icon-c33661e6.js",import.meta.url,"iconc33661e6");SML.di("./utils-57a7018c.js",import.meta.url,"utils57a7018c");SML.di("./faceplate-form-cff507f5.js",import.meta.url,"faceplateformcff507f5");SML.di("./age-gate-standalone-client-js-b13e879d.js",import.meta.url,"agegatestandaloneclientjsb13e879d");SML.di("./community-picker-f331f77f.js",import.meta.url,"communitypickerf331f77f");SML.di("./shop-gallery-data-fetcher-client-js-777c4af0.js",import.meta.url,"shopgallerydatafetcherclientjs777c4af0");SML.di("./faceplate-search-input-c5d66775.js",import.meta.url,"faceplatesearchinputc5d66775");SML.di("./expandable-section-header-41e0cfd1.js",import.meta.url,"expandablesectionheader41e0cfd1");SML.di("./faceplate-radio-input-3de18d3b.js",import.meta.url,"faceplateradioinput3de18d3b");SML.di("./index-970155ae.js",import.meta.url,"index970155ae");SML.di("./header-action-item-chat-client-js-b3335fba.js",import.meta.url,"headeractionitemchatclientjsb3335fba");SML.di("./community-image-upload-ff4f665f.js",import.meta.url,"communityimageuploadff4f665f");SML.di("./emoji-template-table-client-js-6120d646.js",import.meta.url,"emojitemplatetableclientjs6120d646");SML.di("./chat-mobile-xpromo-client-js-5e1c145c.js",import.meta.url,"chatmobilexpromoclientjs5e1c145c");SML.di("./text-input-9c3f45be.js",import.meta.url,"textinput9c3f45be");SML.di("./constants-9e09f052.js",import.meta.url,"constants9e09f052");SML.di("./number-a5d31186.js",import.meta.url,"numbera5d31186");SML.di("./helpers-4792ac4d.js",import.meta.url,"helpers4792ac4d");SML.di("./tooltip.base-aa9651a3.js",import.meta.url,"tooltipbaseaa9651a3");SML.di("./utils-93db03dd.js",import.meta.url,"utils93db03dd");
SML.dm("communitycreationwalkthroughclientjsbcec1a48",["communitycreationwalkthroughfragmentclientjs7c6966f6","shelle48e5956","faceplatetextareainput29f541e5","iconc33661e6","utils57a7018c","agegatestandaloneclientjsb13e879d","communitypickerf331f77f","expandablesectionheader41e0cfd1","faceplateformcff507f5","shopgallerydatafetcherclientjs777c4af0","faceplatesearchinputc5d66775","faceplateradioinput3de18d3b","index970155ae","headeractionitemchatclientjsb3335fba","communityimageuploadff4f665f","emojitemplatetableclientjs6120d646","chatmobilexpromoclientjs5e1c145c","textinput9c3f45be","constants9e09f052","numbera5d31186","helpers4792ac4d","tooltipbaseaa9651a3","utils93db03dd"],(async(e,t,i,s,a,n,o,d)=>{const r=s.x`<span class="text-12 text-neutral-content-weak mx-2xs">\u00B7</span>`;let h=class extends s.s{constructor(){super(...arguments),this.name="",this.description="",this.shouldShowDefaultImages=!1}renderPublicDescriptionText(){return s.x`<p class="m-0 text-ellipsis mb-2xs"> ${0===this.description.length?"Your community description":this.description} </p>`}renderActiveAndTotalSubscribers(){const e=s.x`<span><faceplate-number number="1" pretty></faceplate-number> online</span>`;return s.x` <div class="text-12 text-neutral-content-weak"> <span>${o.m(s.x,1,!0)}</span>${r}${e} </div> `}renderTitleLink(){const e=s.x`<span class="block font-semibold text-20 text-neutral-content-strong hover:text-neutral-content-strong hover:no-underline pb-2xs">r/${0===this.name.length?"communityname":this.name}</span>`;return s.x`${e}`}renderSubredditIcon(){return void 0===this.avatar||""===this.avatar?n.l({children:t.r({appearance:"brand",leadingIcon:s.F({size:s.I.XXLarge}),size:t.s.Large,attributes:{tabindex:"-1","aria-hidden":"true"}}),attributes:{tabindex:"-1","aria-hidden":"true"},appearance:"icon",size:"lg"}):s.x`<img loading="lazy" width="42" height="42" class="rounded-[50%] overflow-hidden border-[0.5px] border-solid" src="${this.avatar}" alt="An avatar for the subreddit">`}render(){return s.x`<div class="flex rounded shadow-sm xs:rounded-4 flex-col relative max-w-[268px] grow max-h-[350px] overflow-auto"> ${this.shouldShowDefaultImages||this.banner?this.banner?s.x`<div class="w-100"> <img class="max-w-[100%] w-100 object-cover max-h-[40px] rounded-t-[12px]" src="${this.banner}" alt="Banner"> </div>`:s.x`<div class="w-100 bg-orangered-50 min-h-[32px] max-h-[40px]"></div>`:s.A} <div class="flex justify-start gap-x-md m-md mb-0"> ${this.avatar||this.shouldShowDefaultImages?s.x`<span class="block mt-2xs">${this.renderSubredditIcon()}</span>`:s.A} <div class="flex-col flex justify-center"> ${this.renderTitleLink()} <div>${this.renderActiveAndTotalSubscribers()}</div> </div> </div> <div class="p-sm pt-xs">${this.renderPublicDescriptionText()}</div> </div>`}};h.styles=[t.t],t._([t.n({type:String})],h.prototype,"name",void 0),t._([t.n({type:String})],h.prototype,"description",void 0),t._([t.n({type:String})],h.prototype,"avatar",void 0),t._([t.n({type:String})],h.prototype,"banner",void 0),t._([t.n({type:Boolean,attribute:"show-default-images"})],h.prototype,"shouldShowDefaultImages",void 0),h=t._([t.e("community-creation-preview")],h);const l=new RegExp("^[A-Za-z0-9][A-Za-z0-9_]{0,20}$"),c=(e,i)=>t.h({one:`${e} of ${i} character`,other:`${e} of ${i} characters`,count:i}),u=s.s;let p=class extends u{constructor(){super(...arguments),this.events=new t.E(this,(()=>window)),this.subreddit={name:"",description:""},this.nameTaken=!1,this.validCharsName=!0,this.descriptionTooLong=!1,this.prefixText="",this.handleNameChange=i=>{const s=i.target.value.trim();this.nameInput.value=s,this.subreddit=e.u(this.subreddit,{name:s}),this.prefixText=""!==s?"r/":"",this.validCharsName=l.test(s)||""===s,this.nameTaken&&this.validateNameTaken(),this.nameInputHelperText?.setMessage(this.getNameHelperText(),t.x.error),this.nameInputHelperText?.requestUpdate()},this.handleDescriptionChange=t=>{const i=t.target.value;this.descriptionInput?.setCustomValidity(""),this.descriptionInputHelperText?.setMessage(""),this.subreddit=e.u(this.subreddit,{description:i}),this.descriptionTooLong=i.length>500,this.descriptionTooLong&&this.setDescriptionTooLong()}}get submitButton(){return this.querySelector('button[type="submit"]')}get nameInput(){return this.shadowRoot?.querySelector('faceplate-text-input[name="name"]')}get descriptionInput(){return this.shadowRoot?.querySelector("faceplate-textarea-input")}get nameInputHelperText(){return this.nameInput?.shadowRoot?.querySelector('faceplate-form-helper-text[name="name"]')}get descriptionInputHelperText(){return this.descriptionInput?.shadowRoot?.querySelector('faceplate-form-helper-text[name="description"]')}async firstUpdated(){await this.updateComplete,this.querySelector("faceplate-pagination-indicator")?.shadowRoot?.querySelectorAll("button.dot").forEach((e=>{e.tabIndex=-1,e.ariaHidden="true"})),this.dispatchEvent(t.c("refresh_focus",{title:"Tell us about your community",ariaLabel:"Tell us about your community. "+e.S(1)})),this.events.define(e.a,(async i=>{i.stopPropagation(),await this.validateNameTaken(),this.formValid()&&(t.a(this,e.d(this.subreddit.description?.length||0)),this.dispatchSubredditUpdatedEvent("next"))})),this.events.define(e.b,(async e=>{e.stopPropagation(),this.dispatchSubredditUpdatedEvent("back")}))}update(e){this.validateNextButtonDisabled(),super.update(e)}dispatchSubredditUpdatedEvent(t){const i=new CustomEvent(e.U,{bubbles:!0,composed:!0,detail:{subreddit:this.subreddit,direction:t,source:e.e.NameAndDescription}});this.dispatchEvent(i)}dispatchErrors(e){const i=t.c("faceplate-alert",{level:t.x.error,cause:"uncategorized",message:e});this.dispatchEvent(i)}async validateNameTaken(){if(this.nameTaken||this.nameInput&&this.nameInput.checkValidity()){try{if(null===(await t.B({operation:t.O.CommunityName,variables:{subredditName:this.subreddit.name||""}})).data.subreddit)return this.nameTaken=!1,void this.resetNameInputValidation();t.a(this,e.f({reason:"Name already taken",setting_value:this.subreddit.name})),this.setNameInputTakenValidationMessage()}catch(e){this.dispatchErrors("Server error. Try again later. ")}this.nameTaken=!0}}setNameInputTakenValidationMessage(){this.nameInput?.setCustomValidity("invalid"),this.nameInputHelperText?.setMessage(`"r/${this.subreddit.name}" is already taken`,t.x.error),this.nameInput?.setCustomValidity("invalid")}setDescriptionTooLong(){this.descriptionInputHelperText?.setMessage("Description is too long.",t.x.error),this.descriptionInput?.setCustomValidity("invalid")}resetNameInputValidation(){this.nameInput.setCustomValidity(""),this.nameInputHelperText?.setMessage("")}getNameHelperText(){return this.validCharsName?3>this.subreddit.name.length?"Please lengthen this text to 3 characters or more":"":"Only letters, numbers and underscore are allowed"}formValid(){return null!==this.subreddit.name&&this.subreddit.name.length>=3&&this.subreddit.name.length<=21&&null!==this.subreddit.description&&this.subreddit.description.length>=1&&this.subreddit.description.length<=500&&!this.nameTaken&&this.validCharsName}validateNextButtonDisabled(){this.submitButton.disabled=!this.formValid()}render(){return s.x` <div class="xs:w-[752px] h-16 pr-12 py-2.5 rounded-2xl justify-start items-center pb-xl inline-flex"> <div class="grow shrink basis-0 flex-col justify-center items-start gap-[4px] inline-flex"> <div class="self-stretch text-sm font-normal text-tone-2 leading-tight">${"A name and description help people understand what your community is all about."}</div> </div> </div> <div class="mb-0"> <div class="flex gap-md flex-col-reverse flow xs:flex-row"> <div class="min-w-[55%]"> <faceplate-form class="w-100" validation-trigger="change"> <faceplate-text-input data-testid="name-input" class="block flex-1 pb-sm pt-sm" type="text" name="name" helper-text-message="${this.getNameHelperText()}" pattern="^[A-Za-z0-9][A-Za-z0-9_]{2,20}$" maxLength="21" value="${s.l(this.subreddit.name)}" required @input="${this.handleNameChange}" novalidate appearance="${i.a.SECONDARY}" prefix="${s.l(this.prefixText)}" @focusout="${this.validateNameTaken}" character-count character-count-aria-label="${c(this.subreddit.name.length,21)}" helper-text-screen-reader-msg="Character count limit reached"> <span slot="label"> ${"Community name"} </span> </faceplate-text-input> </faceplate-form> <faceplate-textarea-input size="expanded" appearance="${i.a.SECONDARY}" @input="${this.handleDescriptionChange}" value="${s.l(this.subreddit.description)}" name="description" required novalidate helper-text-message="${"Please shorten this text to 500 characters or less"}" rows="8" class="min-w-full xs:pb-lg" character-count character-count-aria-label="${c(this.subreddit.description.length,500)}"><span slot="label">${"Description"}</span> </faceplate-textarea-input> </div> <div class="flex items-start grow"> <community-creation-preview class="w-100 flex justify-center" name="${s.l(this.subreddit.name)}" description="${s.l(this.subreddit.description)}"></community-creation-preview> </div> </div> <div class="mb-0 pt-[42px]"> <slot name="buttons-bar"></slot> </div> </div> `}};p.styles=[t.t],t._([t.d()],p.prototype,"subreddit",void 0),t._([t.d()],p.prototype,"nameTaken",void 0),t._([t.d()],p.prototype,"validCharsName",void 0),t._([t.d()],p.prototype,"descriptionTooLong",void 0),p=t._([t.e("community-creation-name-description")],p);const g=new Set(["tx1_20v2840","tx1_15teiqi","tx1_2b40g1a","tx1_14gsvq1","tx1_18c3qbq","tx1_12l080p","tx1_1nlg6jt","tx1_192ms0u","tx1_1ri658n"]),m=3,v=e=>({id:e.id??"",displayName:e.displayName??"",icon:e.icon??null,children:e.children?.map(v)??null}),b=s.s;let x=class extends b{constructor(){super(...arguments),this.events=new t.E(this,(()=>window)),this.subreddit={topics:[]},this.selectedTopics=[],this.topics=[],this._loading=!1,this.maxTopicsSelected=!1,this.gqlTopics=[],this.filter="",this.removeSelected=e=>{this.maxTopicsSelected=!1,this.selectedTopics=this.selectedTopics.filter((t=>t!==e))},this.onTopicsClick=(e,t)=>{this.maxTopicsSelected=!1,e?this.selectedTopics.length<m?(this.selectedTopics.push(t),this.requestUpdate()):this.maxTopicsSelected=!0:this.selectedTopics=this.selectedTopics.filter((e=>e!==t))},this.handleFilterChange=e=>{const t=e.target.value;this.filter=t,this.topics=this.gqlTopics.flatMap((e=>{if(e.displayName.toLowerCase().indexOf(t.toLowerCase())>-1)return[{...e,children:e.children}];{const i=e.children?e.children.filter((e=>e.displayName.toLowerCase().indexOf(t.toLowerCase())>-1)):[];return i.length>0?{...e,children:i}:[]}}))}}get topicsContainer(){return this.shadowRoot.querySelector("#topics")}get submitButton(){return this.querySelector('button[type="submit"]')}async firstUpdated(){this.loadTopics(),await this.updateComplete,this.querySelector("faceplate-pagination-indicator")?.shadowRoot?.querySelectorAll("button.dot").forEach((e=>{e.tabIndex=-1,e.ariaHidden="true"})),this.dispatchEvent(t.c("refresh_focus",{title:"Add topics",ariaLabel:"Add topics. "+e.S(3)})),this.events.define(e.a,(async i=>{i.stopPropagation(),this.submitButtonEnabled()&&(t.a(this,e.t(this.subreddit.topics.map((e=>e.displayName)),this.subreddit.topics.map((e=>e.id)))),this.dispatchSubredditUpdatedEvent("next"))})),this.events.define(e.b,(async e=>{e.stopPropagation(),this.dispatchSubredditUpdatedEvent("back")}))}dispatchSubredditUpdatedEvent(t){const i=new CustomEvent(e.U,{bubbles:!0,composed:!0,detail:{subreddit:{topics:this.filterSelected(this.gqlTopics)},direction:t,source:e.e.Topics}});this.dispatchEvent(i)}update(e){this.enableSubmitButtonIfValid(),e.has("subreddit")&&(this.selectedTopics=this.subreddit.topics?.map((e=>e.id))||[]),super.update(e)}filterSelected(e){let t=[];return e.forEach((e=>{this.selectedTopics.includes(e.id)&&t.push({...e,children:e.children??null});const i=e.children?this.filterSelected(e.children):[];i.length>0&&(t=t.concat(i))})),t}async loadTopics(){this._loading=!0;const e=await t.B({operation:t.O.TaxonomyTopicsInfo});this._loading=!1;const i=e.data?.taxonomyInfo?.topics;if(i)i.sort(((e,t)=>{const i=g.has(e.id),s=g.has(t.id);return i&&!s?1:!i&&s?-1:e.displayName.localeCompare(t.displayName)})),this.gqlTopics=i.map(v),this.topics=this.gqlTopics;else{const e="There was an error fetching topics. Please try again later.",i=t.c("faceplate-alert",{level:t.x.error,cause:"uncategorized",message:e});this.dispatchEvent(i)}}dispatchWarningEvent(t,i,s){const a=new CustomEvent(e.g,{bubbles:!0,composed:!0,detail:{title:t,message:i,secondaryButton:s}});this.dispatchEvent(a)}submitButtonEnabled(){return this.selectedTopics.length>0&&this.selectedTopics.length<=m}enableSubmitButtonIfValid(){this.submitButton.disabled=!this.submitButtonEnabled()}renderTopics(){return 0===this.topics.length?s.x`<div> ${n.ag({attributes:{type:"button"},children:s.x`<span class="flex"><span class="select-none text-12 font-semibold">No topics match your search </span></span>`,leadingIcon:s.$()})} </div>`:s.x`<div id="topics" class="flex flex-col gap-lg h-[250px] xs:h-[330px] overflow-x-hidden overflow-y-scroll"> ${this.topics.map((e=>this.renderTopic(e)),this)} </div>`}renderTopic({children:e,displayName:t,icon:i}){return s.x` <fieldset aria-labelledby="title-${t}" class="topic-section p-0 m-0 border-0"> <legend> <h3 class="my-0 text-14">${i}<span class="ml-2xs">${t}</span></h3> </legend> ${e?s.x`<div class="flex flex-wrap gap-x-2xs gap-y-xs mt-2xs"> ${e.map((e=>this.renderTopicContainer(e,this.selectedTopics.indexOf(e.id)>-1)))} </div>`:s.A} </fieldset> `}renderTopicContainer(e,t){const i=()=>{this.onTopicsClick(!t,e.id)};return s.x` <div class="topic-container" id="container_${e.id}" data-topic="${e.displayName}"> <label for="${e.id}" class="group"> ${n.ag({selected:t,attributes:{id:e.id,type:"button","aria-pressed":t?"true":"false",onclick:i},deleteButtonConfig:{screenReaderContent:`Deselect topic ${e.displayName}`,attributes:{onclick:e=>{e.preventDefault(),e.stopPropagation(),i()},type:"button",id:`unselect-${e.id}`}},children:s.x`<span class="select-none text-12 font-semibold">${e.displayName} </span>`})} </label> </div> `}renderSelectedTopics(){return s.x`<div id="selected-topics-container" class="min-h-[32px] h-fit flex flex-wrap justify-start gap-xs"> ${this.filterSelected(this.gqlTopics).map((e=>n.ag({children:e.displayName,selected:!0,attributes:{type:"button",id:`selected-topic-${e.id}`,className:"bg-neutral-background rounded-1 border-neutral-border",onclick:()=>{this.removeSelected(e.id)}},deleteButtonConfig:{screenReaderContent:`Deselect topic ${e.displayName}`,attributes:{onclick:()=>{this.removeSelected(e.id)},type:"button",id:`unselect-${e.id}`}}})))} </div>`}render(){const e=this._loading?s.x`<shreddit-loading class="pointer-events-none h-[8rem] mt-4xl"></shreddit-loading>`:this.renderTopics();return s.x`<div class="w-96 h-16 pr-12 py-2.5 rounded-2xl justify-start items-center pb-xl inline-flex"> <div class="grow shrink basis-0 flex-col justify-center items-start gap-[4px] inline-flex"> <div class="self-stretch text-sm font-normal text-tone-2 leading-tight">${"Add up to 3 topics to help interested redditors find your community."}</div> </div> </div> <faceplate-search-input appearance="${a.T.SECONDARY}" class="w-full ml-0 mt-sm" type="text" name="filter" @input="${this.handleFilterChange}" value="${this.filter}" placeholder="${"Filter topics"}" novalidate inputmode></faceplate-search-input> <h3 class="w-full flex justify-start text-16 my-xs"> ${i=this.selectedTopics.length.toString(),`Topics ${i}/3 `} </h3> ${this.renderSelectedTopics()} <div data-testid="mature-label-container" class="w-96 text-danger-content min-h-[32px] text-xs font-normal"> ${this.maxTopicsSelected?t.h({one:`Only ${m} topic can be added`,other:`Only ${m} topics can be added`,count:m}):this.selectedTopics.filter((e=>g.has(e))).length>0?"Selecting Mature topics labels your community as 18+ and limits discovery":""} </div> ${e} <slot></slot> <div class="pt-[40px]"> <slot name="buttons-bar"></slot> </div>`;var i}};x.styles=[t.t,t.z(".bg-rose-100 {\n  background-color: #fceee8;\n}\n.bg-slate-200 {\n  background-color: #e5ebee;\n}\n.fieldset-disabled {\n  opacity: 0.4;\n  pointer-events: none;\n}\n.bg-parent-topic-selected {\n  background-color: #d4c4c4;\n}\n")],t._([t.d()],x.prototype,"subreddit",void 0),t._([t.d()],x.prototype,"selectedTopics",void 0),t._([t.d()],x.prototype,"topics",void 0),t._([t.d()],x.prototype,"_loading",void 0),t._([t.d()],x.prototype,"maxTopicsSelected",void 0),x=t._([t.e("community-creation-topic-selection")],x);const y=[{value:t.eT.Public},{value:t.eT.Restricted},{value:t.eT.Private},{adminRequired:!0,value:t.eT.EmployeesOnly}],f=s.s;let w=class extends f{constructor(){super(...arguments),this.events=new t.E(this,(()=>window)),this.subreddit={type:t.eT.Public,isNSFW:!1},this.isAdmin=!1,this.forceNSFW=!1,this.renderRadioItem=t=>{const i=t.value===this.subreddit.type,{label:a,description:o,icon:r,iconSelected:h}=n.ce({type:t.value})??{};return s.x`<label> ${d.l({onClick:()=>this.subreddit=e.u(this.subreddit,{type:t.value}),label:a??"",size:d.L.Medium,attributes:{role:"menuitemradio"},leadingIcon:i?h:r,trailingSlot:s.x`<faceplate-radio-input class="m-0" @input="${this.typeInputChangeHandler}" ?checked="${i}" name="type" value="${t.value}"></faceplate-radio-input>`,description:o,selected:i})} </label>`}}get _isSubredditNsfw(){return this.subreddit.isNSFW||this.forceNSFW}typeInputChangeHandler(t){const i=t.target.value;this.subreddit=e.u(this.subreddit,{type:i})}renderTypeInput(){return s.x` <div class="mb-xs"> <ul role="menu" class="pl-0"> ${y.map((e=>e.adminRequired&&!this.isAdmin?s.A:this.renderRadioItem(e)))} </ul> </div> `}async firstUpdated(i){super.firstUpdated(i);for(const e of this.subreddit.topics||[])if(g.has(e.id)){this.forceNSFW=!0;break}await this.updateComplete,this.querySelector("faceplate-pagination-indicator")?.shadowRoot?.querySelectorAll("button.dot").forEach((e=>{e.tabIndex=-1,e.ariaHidden="true"})),this.dispatchEvent(t.c("refresh_focus",{title:"What kind of community is this?",ariaLabel:"What kind of community is this?. "+e.S(4)})),this.events.define(e.a,(async i=>{i.stopPropagation(),t.a(this,e.h(this.subreddit.type.toString())),t.a(this,e.n(this._isSubredditNsfw)),this.dispatchSubredditUpdatedEvent("next")})),this.events.define(e.b,(async e=>{e.stopPropagation(),this.dispatchSubredditUpdatedEvent("back")}))}dispatchSubredditUpdatedEvent(t){const i=new CustomEvent(e.U,{bubbles:!0,composed:!0,detail:{subreddit:{...this.subreddit,isNSFW:this._isSubredditNsfw},direction:t,source:e.e.Type}});this.dispatchEvent(i)}renderNsfwInput(){const t=this._isSubredditNsfw,i=s.x`<span class="w-full min-w-100 ${this.forceNSFW?"opacity-75":""}"> ${d.l({onClick:()=>{this.forceNSFW||(this.subreddit=e.u(this.subreddit,{isNSFW:!t}))},label:"Mature (18+) ",attributes:{role:"menuitemcheckbox"},size:d.L.Medium,leadingIcon:t?s.w():s.bD(),trailingSlot:s.x` <faceplate-switch-input class="-mr-xs" data-testid="nsfw-input" name="isNsfw" ?checked="${t}" @click="${e=>{this.forceNSFW&&e.preventDefault()}}"> </faceplate-switch-input> `,description:"Users must be over 18 to view and contribute"})} </span>`;return this.forceNSFW?s.x`<rpl-tooltip placement="bottom-start" appearance="inverted" trigger="hover" class="w-full" style="--show-delay:100ms"> ${i} ${s.x`<div class="w-[190px]" slot="content">${"Community marked as Mature (18+) \n because you selected a mature topic"}</div>`} </rpl-tooltip>`:i}render(){return s.x`<div class="min-h-[600px]"> <div class="w-96 h-16 pr-12 py-2.5 rounded-2xl justify-start items-center pb-xl inline-flex"> <div class="grow shrink basis-0 flex-col justify-center items-start gap-[4px] inline-flex"> <div class="self-stretch text-sm font-normal text-tone-2 leading-tight">${s.x`Decide who can view and contribute in your community. Only public communities show up in search. <strong>Important:</strong> Once set, you will need to submit a request to change your community type.`}</div> </div> </div> ${this.renderTypeInput()} <div class="w-full h-0 border border-black border-opacity-20 mb-sm border-solid"></div> ${this.forceNSFW?s.x`<div class="w-96 text-danger-content text-xs font-normal"> ${"Community marked as Mature (18+) \n because you selected a mature topic"} </div>`:s.A} ${this.renderNsfwInput()} <slot name="buttons-bar"></slot> </div>`}};w.styles=[t.z("\n    @media (max-width: 400px) {\n      :host {\n        --horizontal-padding: 16px;\n        --topbar-horizontal-padding: 16px;\n        max-height: none;\n        width: 100%;\n        max-width: none;\n        border-radius: 0;\n        margin-top: 20px;\n        padding-bottom: 0;\n        transition: padding-bottom 200ms ease-in-out;\n        z-index: 5;\n        min-height:100vh;\n      }\n    }"),t.t],t._([t.d()],w.prototype,"subreddit",void 0),t._([t.n({type:Boolean,attribute:"admin"})],w.prototype,"isAdmin",void 0),t._([t.d()],w.prototype,"forceNSFW",void 0),w=t._([t.e("community-creation-walkthrough-type")],w);const T="white",S="#63f050",E="black";let _=class extends s.s{constructor(){super(...arguments),this.fileName="cropped_image.png",this.canvasClasses="w-100 h-100",this.selectionWidth=100,this.selectionHeight=100,this.keepAspectRatio=!0,this.resizable=!0,this.adjustSelectionToBorder=!1,this._canvasEvents=new t.E(this,(()=>this.canvas)),this.imageSaved=!1,this.imageToRender=new Image,this.imagePosition={x:0,y:0,width:0,height:0},this.scale=1,this.guide={x:0,y:0,width:0,height:0},this.isDragging=!1,this.resizeCorner="",this.offsetX=0,this.offsetY=0,this.zoomLevel=1,this.maxZoomLevel=3,this.onMouseDown=e=>{const t=this.canvas.getBoundingClientRect();let i,s;e instanceof MouseEvent?(i=e.clientX-t.left,s=e.clientY-t.top):(i=e.touches[0].clientX-t.left,s=e.touches[0].clientY-t.top);if(i>=this.guide.x-8&&i<=this.guide.x+this.guide.width+8&&s>=this.guide.y-8&&s<=this.guide.y+this.guide.height+8){this.offsetX=i-this.guide.x,this.offsetY=s-this.guide.y;const e=16;i>=this.guide.x-e/2&&i<=this.guide.x+e/2&&s>=this.guide.y-e/2&&s<=this.guide.y+e/2?this.resizeCorner="top-left":i>=this.guide.x+this.guide.width-e/2&&i<=this.guide.x+this.guide.width+e/2&&s>=this.guide.y-e/2&&s<=this.guide.y+e/2?this.resizeCorner="top-right":i>=this.guide.x-e/2&&i<=this.guide.x+e/2&&s>=this.guide.y+this.guide.height-e/2&&s<=this.guide.y+this.guide.height+e/2?this.resizeCorner="bottom-left":i>=this.guide.x+this.guide.width-e/2&&i<=this.guide.x+this.guide.width+e/2&&s>=this.guide.y+this.guide.height-e/2&&s<=this.guide.y+this.guide.height+e/2?this.resizeCorner="bottom-right":this.isDragging=!0}},this.onMouseMove=e=>{const t=this.canvas.getBoundingClientRect();let i,s;e instanceof MouseEvent?(i=e.clientX-t.left,s=e.clientY-t.top):(i=e.touches[0].clientX-t.left,s=e.touches[0].clientY-t.top);i>=this.guide.x-8&&i<=this.guide.x+this.guide.width+8&&s>=this.guide.y-8&&s<=this.guide.y+this.guide.height+8?this.canvas.style.cursor="move":this.canvas.style.cursor="default",this.isDragging?this.moveSelectionArea(e):this.resizable&&this.resizeCorner&&this.resizeSelectionArea(e)},this.onMouseUp=()=>{this.isDragging=!1,this.resizeCorner=""},this.handleCancelKeyUp=e=>{"Enter"===e.key&&this.cancelClick()},this.handleSaveKeyUp=e=>{"Enter"===e.key&&this.saveCroppedImage()}}get canvas(){return this.shadowRoot.querySelector("canvas")}drawSelectionArea(e){e.strokeStyle=T,e.lineWidth=2,e.strokeRect(this.guide.x,this.guide.y,this.guide.width,this.guide.height);e.fillStyle="rgba(0, 0, 0, 0.3)",e.fillRect(0,0,this.guide.x,this.canvas.height),e.fillRect(this.guide.x+this.guide.width,0,this.canvas.width-(this.guide.x+this.guide.width),this.canvas.height),e.fillRect(this.guide.x,0,this.guide.width,this.guide.y),e.fillRect(this.guide.x,this.guide.y+this.guide.height,this.guide.width,this.canvas.height-(this.guide.y+this.guide.height))}drawResizeHandles(e){e.fillStyle=T,e.strokeStyle=E,e.lineWidth=1,e.fillRect(this.guide.x-4,this.guide.y-4,8,8),e.strokeRect(this.guide.x-4,this.guide.y-4,8,8),e.fillRect(this.guide.x+this.guide.width-4,this.guide.y-4,8,8),e.strokeRect(this.guide.x+this.guide.width-4,this.guide.y-4,8,8),e.fillRect(this.guide.x-4,this.guide.y+this.guide.height-4,8,8),e.strokeRect(this.guide.x-4,this.guide.y+this.guide.height-4,8,8),e.fillStyle=S,e.strokeStyle=S,e.fillRect(this.guide.x+this.guide.width-4,this.guide.y+this.guide.height-4,8,8),e.strokeRect(this.guide.x+this.guide.width-4,this.guide.y+this.guide.height-4,8,8)}drawCanvas(){if(this.imgSrc){const e=this.canvas.getContext("2d");if(e){e.clearRect(0,0,this.canvas.width,this.canvas.height),e.fillStyle=E,e.fillRect(0,0,this.canvas.width,this.canvas.height);const t=this.imagePosition.width*this.zoomLevel,i=this.imagePosition.height*this.zoomLevel,s=(this.canvas.width-t)/2,a=(this.canvas.height-i)/2;e.drawImage(this.imageToRender,s,a,t,i),this.drawSelectionArea(e),this.resizable&&this.drawResizeHandles(e)}}}moveSelectionArea(e){const t=this.canvas.getBoundingClientRect();let i,s;e instanceof MouseEvent?(i=e.clientX-t.left,s=e.clientY-t.top):(i=e.touches[0].clientX-t.left,s=e.touches[0].clientY-t.top);let a=i-this.offsetX;a<0?a=0:a+this.guide.width>this.canvas.width&&(a=this.canvas.width-this.guide.width);let n=s-this.offsetY;n<0?n=0:n+this.guide.height>this.canvas.height&&(n=this.canvas.height-this.guide.height),this.guide.x=a,this.guide.y=n,this.drawCanvas()}resizeSelectionArea(e){const t=this.canvas.getBoundingClientRect();let i;i=e instanceof MouseEvent?e.clientX-t.left:e.touches[0].clientX-t.left;const s=30;let a=0,n=0;switch(this.resizeCorner){case"top-left":a=this.guide.width-(i-this.guide.x),a=a>s?a:s,n=a*(this.keepAspectRatio?this.guide.height/this.guide.width:1),this.guide.x=i,this.guide.y+=this.guide.height-n,this.guide.width-=a,this.guide.height=n;break;case"top-right":a=i-this.guide.x,a=a>s?a:s,n=a*(this.keepAspectRatio?this.guide.height/this.guide.width:1),this.guide.y+=this.guide.height-n,this.guide.width=a,this.guide.height=n;break;case"bottom-left":a=this.guide.width-(i-this.guide.x),a=a>s?a:s,n=a*(this.keepAspectRatio?this.guide.height/this.guide.width:1),this.guide.x=i,this.guide.width=a,this.guide.height=n;break;case"bottom-right":a=i-this.guide.x,a=a>s?a:s,n=a*(this.keepAspectRatio?this.guide.height/this.guide.width:1),this.guide.width=a,this.guide.height=n}a>0&&n>0&&(this.guide.width=a,this.guide.height=n,this.drawCanvas())}saveCroppedImage(){const e=1/this.scale,t=document.createElement("canvas"),i=t.getContext("2d");t.width=this.canvas.width*e,t.height=this.canvas.height*e;const s=this.imagePosition.width*e*this.zoomLevel,a=this.imagePosition.height*e*this.zoomLevel,n=(t.width-s)/2,o=(t.height-a)/2;i.drawImage(this.imageToRender,n,o,s,a);const d=this.guide.x*e,r=this.guide.y*e,h=this.guide.width*e,l=this.guide.height*e,c=document.createElement("canvas"),u=c.getContext("2d");c.width=h,c.height=l,u.drawImage(t,d,r,h,l,0,0,h,l),this.imageSaved=!0,c.toBlob((e=>{if(e&&this.onSave){const t=new File([e],this.fileName,{type:"image/png"});this.onSave(t)}}))}zoomIn(){this.zoomLevel<this.maxZoomLevel&&(this.zoomLevel+=.1,this.drawCanvas())}zoomOut(){this.zoomLevel>.5&&(this.zoomLevel-=.1,this.drawCanvas())}resizeImage(){this.scale=Math.min(this.canvas.width/this.imageToRender.width,this.canvas.height/this.imageToRender.height),this.imagePosition.width=this.imageToRender.width*this.scale,this.imagePosition.height=this.imageToRender.height*this.scale,this.imagePosition.x=(this.canvas.width-this.imagePosition.width)/2,this.imagePosition.y=(this.canvas.height-this.imagePosition.height)/2,this.adjustSelectionToBorder&&(this.imagePosition.width<this.imagePosition.height?this.adjustSelectionToWidth():this.adjustSelectionToHeight())}adjustSelectionToWidth(){const e=this.guide.width,t=this.guide.height;this.guide.width=this.imagePosition.width;let i=this.selectionHeight;this.keepAspectRatio&&(i=this.guide.width/this.selectionWidth*this.selectionHeight),i>this.canvas.height&&(i=this.canvas.height-5,this.guide.width=i/this.selectionHeight*this.selectionWidth),this.guide.height=i,this.guide.x=this.guide.x-(this.guide.width-e)/2,this.keepAspectRatio&&(this.guide.y=this.guide.y-(this.guide.height-t)/2)}adjustSelectionToHeight(){const e=this.guide.height,t=this.guide.width;this.guide.height=this.imagePosition.height;let i=this.selectionWidth;this.keepAspectRatio&&(i=this.guide.height/this.selectionHeight*this.selectionWidth),i>this.canvas.width&&(i=this.canvas.width-5,this.guide.height=i/this.selectionWidth*this.selectionHeight),this.guide.width=i,this.guide.y=this.guide.y-(this.guide.height-e)/2,this.keepAspectRatio&&(this.guide.x=this.guide.x-(this.guide.width-t)/2)}addCanvasEventListeners(){this._canvasEvents.define("mousedown",this.onMouseDown),this._canvasEvents.define("mousemove",this.onMouseMove),this._canvasEvents.define("mouseup",this.onMouseUp),this._canvasEvents.define("mouseout",this.onMouseUp),this._canvasEvents.define("touchstart",this.onMouseDown),this._canvasEvents.define("touchmove",this.onMouseMove),this._canvasEvents.define("touchend",this.onMouseUp)}async firstUpdated(){this.addCanvasEventListeners(),this.canvas.width=this.canvas.getBoundingClientRect().width,this.canvas.height=this.canvas.getBoundingClientRect().height,this.guide={x:this.canvas.getBoundingClientRect().width-this.selectionWidth/2,y:(this.canvas.getBoundingClientRect().height-this.selectionHeight)/2,width:this.selectionWidth,height:this.selectionHeight},this.imageToRender.onload=()=>{this.resizeImage(),this.drawCanvas()},this.imageToRender.src=this.imgSrc||""}updated(e){(e.has("selectionWidth")||e.has("selectionHeight"))&&(this.guide.width=parseInt(this.selectionWidth.toString()),this.guide.height=parseInt(this.selectionHeight.toString()),this.guide.x=(this.canvas.getBoundingClientRect().width-parseInt(this.selectionWidth.toString()))/2,this.guide.y=(this.canvas.getBoundingClientRect().height-parseInt(this.selectionHeight.toString()))/2,this.drawCanvas()),super.updated(e)}cancelClick(){this.onCancel&&this.onCancel()}render(){return s.x` <div class="${this.canvasClasses}"> <div class="p-xs bg-black rounded-1 h-100 w-100" style="${this.canvasWidth?`width:${this.canvasWidth}px; `:""}${this.canvasHeight?`height:${this.canvasHeight}px;`:""}"> <canvas class="w-full h-full inline-block"></canvas> </div> <div class="flex justify-between pt-xs"> <div class="flex justify-start gap-[8px]"> <div class="flex flex-col"> ${t.r({appearance:"secondary",attributes:{type:"square",onclick:this.zoomOut,"aria-label":"Zoom out"},shape:"square",size:t.s.Small,leadingIcon:s.cs({size:s.I.Small})})} </div> <div class="flex flex-col"> ${t.r({appearance:"secondary",attributes:{type:"button",onclick:this.zoomIn,"aria-label":"Zoom in"},shape:"square",size:t.s.Small,leadingIcon:s.u({size:s.I.Small})})} </div> </div> <div class="flex justify-end"> <div @click="${this.cancelClick}" @keyup="${this.handleCancelKeyUp}"> ${this.cancelButton?this.cancelButton:t.r({appearance:"secondary",attributes:{id:"image-cropper-cancel-button",className:"ml-sm","data-testid":"submit-button",type:"submit",slot:"primaryButton"},children:"Cancel",size:t.s.Small})} </div> <div @click="${this.saveCroppedImage}" @keyup="${this.handleSaveKeyUp}"> ${this.saveButton?this.saveButton:t.r({appearance:"primary",attributes:{id:"image-cropper-save-button",className:"ml-sm","data-testid":"submit-button",type:"submit",slot:"primaryButton"},children:"Save",size:t.s.Small})} </div> </div> </div> </div> `}};_.styles=[s.a`:host{display:block;padding:20px}`,t.t],t._([t.n({type:String,attribute:"file-name"})],_.prototype,"fileName",void 0),t._([t.n({type:String,attribute:"canvas-classes"})],_.prototype,"canvasClasses",void 0),t._([t.n({type:String,attribute:"img-src"})],_.prototype,"imgSrc",void 0),t._([t.n({type:Number,attribute:"selection-width"})],_.prototype,"selectionWidth",void 0),t._([t.n({type:Number,attribute:"selection-height"})],_.prototype,"selectionHeight",void 0),t._([t.n({type:Number})],_.prototype,"canvasWidth",void 0),t._([t.n({type:Number})],_.prototype,"canvasHeight",void 0),t._([t.n()],_.prototype,"cancelButton",void 0),t._([t.n()],_.prototype,"onCancel",void 0),t._([t.n()],_.prototype,"saveButton",void 0),t._([t.n()],_.prototype,"onSave",void 0),t._([t.n({type:Boolean})],_.prototype,"keepAspectRatio",void 0),t._([t.n({type:Boolean})],_.prototype,"resizable",void 0),t._([t.n({type:Boolean,attribute:"adjust-selection-to-border"})],_.prototype,"adjustSelectionToBorder",void 0),t._([t.d()],_.prototype,"zoomLevel",void 0),t._([t.d()],_.prototype,"maxZoomLevel",void 0),_=t._([t.e("image-cropper")],_);const I=s.s;let R=class extends I{constructor(){super(...arguments),this.events=new t.E(this,(()=>window)),this.subreddit={},this.editingImage=!1,this.editingImageType="",this.handleAvatarChange=i=>{const s=i.target;this.imageCropperProps={imageSrc:s.src,selectionHeight:300,selectionWidth:300,fileName:s.file.name,onSave:i=>{t.a(this,e.i()),this.editingImage=!1,this.subreddit=e.u(this.subreddit,{avatar:i})}},this.requestUpdate(),this.editingImage=!0,this.editingImageType="icon"},this.handleBannerChange=i=>{const s=i.target;this.imageCropperProps={imageSrc:s.src,selectionHeight:60,selectionWidth:500,fileName:s.file.name,onSave:i=>{t.a(this,e.j()),this.editingImage=!1,this.subreddit=e.u(this.subreddit,{banner:i})}},this.requestUpdate(),this.editingImage=!0,this.editingImageType="banner"},this.imagelistElements=[{getLabel:()=>s.x`${"Banner"}`,getButton:()=>this.getButton(this.handleBannerChange,void 0!==this.subreddit.banner,"Banner"),shouldDisplay:()=>!0,className:"",size:d.L.Medium},{getLabel:()=>s.x`<span class="text-12 text-coolgray-550">${this.subreddit.banner?.name||"banner image"}</span>`,getButton:()=>t.r({appearance:"plain",attributes:{"data-testid":"delete-banner",onclick:()=>{this.subreddit.banner=void 0,this.requestUpdate()},"aria-label":"Delete uploaded banner"},leadingIcon:s.ab({size:s.I.Small})}),shouldDisplay:()=>void 0!==this.subreddit.banner,className:"border-solid border border-tone-4 rounded-1 overflow-hidden",size:d.L.Small},{getLabel:()=>s.x`${"Icon"}`,getButton:()=>this.getButton(this.handleAvatarChange,void 0!==this.subreddit.avatar,"Icon"),shouldDisplay:()=>!0,className:"",size:d.L.Medium},{getLabel:()=>s.x`<span class="text-12 text-coolgray-550">${this.subreddit.avatar.name||"avatar image"}}</span>`,getButton:()=>t.r({appearance:"plain",attributes:{"data-testid":"delete-avatar",onclick:()=>{this.subreddit.avatar=void 0,this.requestUpdate()},"aria-label":"Delete uploaded avatar"},leadingIcon:s.ab({size:s.I.Small})}),shouldDisplay:()=>void 0!==this.subreddit.avatar,className:"border-solid border border-tone-4 rounded-1 overflow-hidden",size:d.L.Small}],this.renderElementList=e=>s.x`<label> ${e.shouldDisplay()?d.l({hasTransparentBackground:!0,onClick:()=>{},label:e.getLabel(),size:e.size,trailingSlot:e.getButton(),attributes:{className:e.className}}):""} </label>`}async firstUpdated(){await this.updateComplete,this.querySelector("faceplate-pagination-indicator")?.shadowRoot?.querySelectorAll("button.dot").forEach((e=>{e.tabIndex=-1,e.ariaHidden="true"})),this.dispatchEvent(t.c("refresh_focus",{title:"Style your community",ariaLabel:"Style your community. "+e.S(2)})),this.events.define(e.a,(async e=>{e.stopPropagation(),this.dispatchSubredditUpdatedEvent("next")})),this.events.define(e.b,(async e=>{e.stopPropagation(),this.dispatchSubredditUpdatedEvent("back")}))}dispatchSubredditUpdatedEvent(t){const i=new CustomEvent(e.U,{bubbles:!0,composed:!0,detail:{subreddit:this.subreddit,direction:t,source:e.e.Images}});this.dispatchEvent(i)}getButton(e,t,i){return s.x`<community-image-upload dropzone-classes="border-none" accept="image/x-png,image/jpeg,image/png" @change="${e}" .customContent="${()=>this.renderButton(t?"bordered":"secondary",t?"Change":"Add",i)}"></community-image-upload>`}renderButton(e,i,a){return s.x`${t.r({attributes:{"aria-label":i+" "+a},appearance:e,children:i,leadingIcon:s.ct(),size:t.s.Small})}`}ImageInputs(){return s.x` <div class="mb-xs min-w-[55%]"> <ul role="menu" class="pl-0"> ${this.imagelistElements.map((e=>this.renderElementList(e)))} </ul> </div> `}render(){const e=s.x`<div class="min-w-[55%] xs:w-[768px] h-16 pr-12 py-2.5 rounded-2xl justify-start items-center pb-xl inline-flex"> <div class="grow shrink basis-0 flex-col justify-center items-start gap-[4px] inline-flex"> <div class="self-stretch text-sm font-normal text-tone-2 leading-tight w-[80%]"> ${this.editingImage?(t=this.editingImageType,"banner"===t?"Banners must be 1028px x 128px":"Icon must be 1:1"):"Adding visual flair will catch new members attention and help establish your community’s culture! You can update this at any time."} </div> </div> </div>`;var t;return this.editingImage?s.x` ${e} <div class="w-100 h-16 pr-12 py-2.5 rounded-2xl justify-start items-center pb-xl inline-flex"> <image-cropper class="max-w-[700px] w-[96%]" canvas-classes="w-100 h-[400px]" img-src="${s.l(this.imageCropperProps?.imageSrc)}" selection-width="${s.l(this.imageCropperProps?.selectionWidth)}" selection-height="${s.l(this.imageCropperProps?.selectionHeight)}" adjust-selection-to-border file-name="${s.l(this.imageCropperProps?.fileName)}" .onCancel="${()=>{this.editingImage=!1}}" .onSave="${this.imageCropperProps?.onSave}"></image-cropper> </div>`:s.x` ${e} <div class="flex gap-md flex-col-reverse xs:flex-row"> ${this.ImageInputs()} <div class="flex items-center grow"> <community-creation-preview class="w-100 flex justify-center" name="${s.l(this.subreddit.name)}" description="${s.l(this.subreddit.description)}" avatar="${this.subreddit.avatar?URL.createObjectURL(this.subreddit.avatar):""}" banner="${this.subreddit.banner?URL.createObjectURL(this.subreddit.banner):""}" show-default-images></community-creation-preview> </div> </div> <div class="mb-0 pt-[42px]"> <slot name="buttons-bar"></slot> </div> `}};R.styles=[t.t],t._([t.d()],R.prototype,"subreddit",void 0),t._([t.d()],R.prototype,"editingImage",void 0),t._([t.d()],R.prototype,"editingImageType",void 0),R=t._([t.e("community-creation-walkthrough-images")],R)}));